"""
Updates global reservoirs surface water area datasets (incremental).

Uses GS bucket to store results.

TODO: move to python package
TODO: merge with merge_time_series.py and get_missing_ids.py as commands (Click?)
TODO: integrate into some Cloud-based workflow

"""

import json
import sys
import os
import time

from tqdm import tqdm
import pandas as pd
import ee
from google.cloud import storage

from eepackages.applications.waterbody_area import computeSurfaceWaterArea

# GS_OUTPUT_DIR = "reservoir-time-series-2021-Q3/time_series_area_raw_update"

GS_OUTPUT_DIR = "reservoir-time-series-2022-Q2/time_series_area_raw_update"

# Q1...Q2+ (development)
# EXPORT_TIME_START = '2021-03-01'
# EXPORT_TIME_STOP = '2021-08-05'

# Q3
# EXPORT_TIME_START = '2021-07-01'
# EXPORT_TIME_STOP = '2021-10-01'

# Q2
EXPORT_TIME_START_FILTER = '2021-05-01'
EXPORT_TIME_START = '2021-09-01'
EXPORT_TIME_STOP = '2022-05-01'

# missing_only=True
missing_only=False
  

# initialize using current user
ee.Initialize()

# initialize using sedrvice account
# service_account = '578920177147-ul189ho0h6f559k074lrodsd7i7b84rc@developer.gserviceaccount.com'
# credentials = ee.ServiceAccountCredentials(service_account, 'privatekey-service.json')
# ee.Initialize(credentials)

# statuses = ee.data.getTaskList()
# print(statuses)
# ee.data.cancelTask('WR6NODRRUHN54C7DNJ5WSGF3')
# sys.exit()


waterOccurrence = (ee.Image("JRC/GSW1_3/GlobalSurfaceWater")
  .select('occurrence')
  .unmask(0)
  .resample('bicubic')
  .divide(100))
  
waterOccurrence = (waterOccurrence.mask(waterOccurrence))
waterbodies = ee.FeatureCollection("projects/global-water-watch/assets/reservoirs-all-v1-0")

# waterbodies = waterbodies.filter(ee.Filter.eq('fid', 92039)) # Kahovka
# waterbodies = waterbodies.filter(ee.Filter.eq('fid', 90554)) # Mead

# bad data (multimodal)
# ids = ee.List([2605, 19716, 91686, 91618, 76576, 4554, 6378, 10767, 89960, 17545, 87562, 90289, 13667, 63356, 86074, 159, 11714, 42612, 39706, 22104, 87169, 17074, 62933, 86187, 86451, 8512, 71501, 87727, 1371, 92088, 10585, 86941, 1007, 89949, 65969, 88998, 83665, 51912, 11625, 87817, 90310, 88206, 35499, 90131, 82620, 22389, 86457, 2403, 7978, 18455, 27994, 88124, 87157, 51035, 1634, 2509, 89613, 7980, 34305, 90626, 77650, 69701, 84947, 46871, 47813, 92393, 87819, 90239, 498, 90132, 86751, 16629, 83663, 12320, 81111, 39779, 70717, 331, 70409, 85750, 3170, 89711, 39700, 1159, 52056, 39590, 84193, 61879, 89877, 52401, 2705, 83882, 15093, 137, 80716, 66806, 89200, 60802, 11101, 91695, 23691, 27084, 16112, 87113, 76176, 65288, 19862, 463, 90217, 73001, 53560, 18142, 85331, 27258, 90201, 1454, 61283, 12214, 2750, 4483, 23151, 85072, 1094, 90691, 90627, 72812, 83874, 5042, 2701, 5849, 85022, 594, 25426, 70558, 581, 6974, 31937, 91947, 89185, 84157, 22835, 23734, 7429, 86219, 83410, 30679, 33367, 1533, 2759, 79712, 29, 296, 75438, 78609, 25968, 83037, 57098, 14886, 84443, 45793, 62887, 88067, 8025, 43701, 90317, 68020, 20236, 87800, 81587, 7969, 19634, 88905, 62825, 44485, 53904, 50972, 14180, 1160, 77801, 53095, 88598, 7632, 86725, 8811, 18829, 53408, 87802, 85439, 88660, 46874, 90425, 4258, 60661, 312, 19808, 88227, 65, 92109, 8710, 87904, 80660, 57352, 4470, 1, 76395, 7708, 60389, 49461, 24308, 41206, 86342, 5462, 88590, 85190, 82589, 85575, 90366, 3305, 89084, 77653, 77922, 89003, 83669, 85477, 70123, 34211, 71433, 89239, 79353, 70177, 86143, 80478, 92107, 82945, 2061, 68063, 9063, 89566, 92033, 2496, 87264, 87251, 19062, 75252, 83309, 80707, 88034, 90696, 90247, 1051, 76812, 848, 87755, 81792, 3344, 85794, 35602, 50039, 85227, 82869, 4949, 79614, 36257, 73924, 12974, 66280, 53869, 79032, 81596, 88654, 1083, 17840, 86075, 91619, 12032, 3485, 1087, 9107, 647, 21780, 91613, 48331, 19734, 2123, 5498, 44599, 48209, 329, 44462, 88817, 4533, 2733, 23787, 33175, 22741, 92090, 80066, 92087, 10500, 3081, 87971, 38645, 90323, 2112, 60649, 88223, 26875, 86848, 71257, 2016, 883, 1475, 87873, 79371, 91696, 3257, 6946, 1499, 73593, 15111, 52871, 89952, 61301, 90687, 46820, 2575, 91970, 34141, 75313, 175, 2493, 92002, 8842, 28784, 8007, 26968, 29302, 92092, 34464, 74343, 11056, 60104, 7, 2336, 92027, 15304, 87070, 89586, 7503, 33011, 23840, 12985, 69395, 2152, 38693, 21762, 49624, 28576, 86429, 35289, 29607, 37773, 88170, 5801, 78145, 15132, 25091, 2005, 72807, 8892, 82154, 291, 11923, 1035, 76213, 24284, 8507, 17590, 86004, 50, 33119, 74330, 89170, 88220, 48889, 84956, 929, 589, 89331, 86548, 68840, 31531, 85723, 69196, 89898, 51060, 74973, 8357, 87399, 4236, 9072, 4694, 37709, 68611, 19707, 77202, 58182, 62267, 81004, 34046, 74152, 70390, 87313, 30471, 90555, 9930, 16661, 92429, 55932, 77945, 69245, 94, 18067, 5949, 44842, 46, 89954, 941, 90214, 45918, 12195, 89300, 538, 60173, 17039, 87484, 36786, 21734, 57618, 408, 85948, 15026, 8037, 25801, 88928, 74542, 91709, 91669, 2730, 89909, 10234, 90252, 83222, 14079, 29990, 14336, 4463, 92391, 92026, 62579, 3869, 31049, 23810, 150, 84303, 19162, 85768, 13, 15439, 90171, 87933, 43048, 92032, 43571, 40469, 34269, 85473, 40952, 10159, 14519, 81996, 90286, 37939, 75510, 424, 89457, 4841, 44284, 84, 87428, 83769, 90577, 90486, 3104, 76375, 84794, 10534, 21975, 27411, 2317, 43504, 89288, 84238, 92081, 88180, 86547, 14842, 50727, 6579, 412, 33706, 28134, 21883, 87537, 83926, 50879, 87336, 12756, 91688, 54602, 23708, 12922, 48941, 74033, 82408, 15914, 77714, 42750, 17936, 6383, 47195, 50135, 81674, 52754, 75099, 235, 11384, 87934, 91617, 48820, 7389, 51484, 13711, 86288, 76231, 71013, 77383, 24594, 10143, 85988, 2803, 18993, 20515, 51708, 92039, 28651, 75793, 1206, 891, 10939, 2115, 87657, 7442, 42292, 91705, 50808, 91687, 90464, 75660, 966, 80346, 693, 87412, 1828, 20853, 78018, 59005, 86820, 87154, 26483, 84997, 68628, 55779, 1244, 89730, 51854, 29899, 12045, 69815, 49052, 531, 4511, 3221, 83587, 84280, 936, 584, 12651, 499, 80374, 86200, 876, 72643, 17931, 53134, 46078, 43786, 8346, 6709, 65035, 84703, 88718, 8464, 89679, 11949, 53816, 53359, 84180, 20136, 20582, 2414, 52631, 3976, 4867, 166, 90269, 87574, 10495, 73100, 60838, 894, 87920, 5365, 80375, 61595, 17325, 87955, 89301, 48321, 6499, 684, 87120, 2053, 3958, 42948, 5182, 12723, 92089, 47395, 83420, 8764, 69192, 2080, 71120, 45663, 90569, 30496, 381, 1378, 21304, 92001, 44189, 54839, 86420, 30079, 87137, 2898, 61432, 70318, 1625, 89609, 847, 21518, 2661, 23, 86922, 87268, 64463, 260, 52665, 90182, 87524, 1732, 77672, 10086, 9424, 74190, 666, 11968, 84639, 88943, 92086, 17489, 85406, 89570, 2246, 3331, 5784, 92108, 77680, 88813, 89290, 90625, 82801, 85701, 85713, 85110, 90170, 87736, 6296, 75470, 85300, 6854, 80497, 89449, 87213, 7379, 51163, 73014, 11154, 5588, 56697, 76882, 50117, 89906, 47016, 83383, 20760, 75949, 88148, 1308, 89621, 8136, 8433, 108, 12271, 67786, 4907, 48168, 69213, 89287, 85810, 27636, 2400, 55369, 6939, 65975, 80782, 82547, 10249, 839, 90173, 22695, 90576, 88210, 86099, 34065, 89438, 90550, 55000, 31051, 62028, 920, 39503, 52134, 91612, 68060, 87577, 47170, 87576, 2532, 58552, 75610, 29591, 48655, 25328, 681, 38449, 7663, 20918, 22035, 18242, 91994, 272, 20807, 38517, 92438, 16948, 90540, 43209, 3696, 91679, 13282, 39394, 37787, 28101, 39802, 311, 85257, 15372, 22631, 53608, 84167, 83246, 19364, 51247, 55121, 15598, 33953, 8581, 16805, 42959, 89437, 78797, 48542, 68509, 27730, 80082, 39981, 90362, 18895, 6505, 104, 25244, 1347, 29001, 5188, 85933, 44, 30064, 36171, 12626, 7070, 85927, 2621, 856, 10373, 14207, 87908, 92003, 85583, 87906, 83977, 87793, 8848, 5110, 51989, 90180, 4718, 22721, 7218, 17615, 78524, 70909, 42424, 42363, 2090, 7596, 15823, 15212, 89197, 89275, 89651, 87449, 72964, 55489])

# Parana River
# ids = ee.List([85600, 88935, 5028, 22316, 72171, 87984, 89441, 82192, 87018, 90252, 91951, 81151, 81163, 82163, 83583, 88154, 89091, 89237, 89906, 89942, 90170, 90325, 90382, 90481, 90540, 90559, 90578, 90620, 91644, 91705, 91947, 91994, 79553, 90348, 78720, 82922, 83264, 83832, 84082, 84756, 84967, 85593, 85802, 86695, 86774, 86930, 87076, 87398, 87401, 87591, 87596, 87677, 87706, 87971, 88151, 88192, 88208, 88217, 88966, 89273, 89449, 89563, 89730, 89912, 89916, 90065, 90286, 90312, 90406, 81470, 81685, 82131, 49832, 51246, 58277, 6284, 27700, 31023, 34736, 40279, 86990, 88635, 89014, 80517, 81601, 82747, 44387, 44816, 45967, 46177, 49271, 49798, 51485, 53297, 54011, 55099, 55306, 59331, 60633, 62849, 63748, 66720, 68501, 69665, 72613, 4977, 7650, 10087, 14117, 14211, 15167, 15765, 16723, 17929, 18099, 18338, 18480, 19652, 21858, 22594, 24189, 26646, 27064, 29077, 31490, 32551, 32859, 34403, 35394, 36170, 36412, 36785, 40039, 86027, 81391, 1254, 45262, 48260, 53006, 55036, 57530, 64091, 64104, 72903, 73605, 74596, 79524, 3735, 4120, 5923, 7965, 8892, 9351, 9944, 11059, 12174, 13046, 13174, 14114, 14413, 15131, 15564, 17698, 17829, 21743, 22319, 22461, 22884, 23550, 28667, 30941, 31363, 36791, 37225, 37626, 39643, 82931, 82423, 367, 379, 394,606, 723, 919, 1073, 1648, 1760, 1846, 1853, 1862, 1876, 1898, 2080, 2126, 43443, 44019, 44160, 44447, 44986, 45619, 46646, 46973, 47769, 48526, 48787, 49531, 50251, 50601, 50839, 50997, 51577, 51621, 52155, 52457, 53798, 54888, 55176, 55549, 55987, 56169, 56189, 56982, 58739, 59499, 61471, 61648, 62862, 64379, 65010, 65453, 66008, 66859, 67696, 68594, 68946, 70183, 70269, 70301, 70327, 70638, 70789, 72836, 74560, 75356, 78074, 2164, 2663, 2848, 2986, 3239, 3446, 3767, 4182, 4522, 4713, 4873, 5045, 5125, 5202, 5465, 5538, 5677, 6146, 6271, 6300, 6394, 6488, 6687, 6719, 6825, 7047, 7866, 8128, 8393, 8449, 8929, 9278, 9593, 9954, 10092, 10094, 10271, 10601, 10755, 10948, 11101, 11150, 11178, 11211, 11223, 11296, 11321, 11521, 11737, 12185, 12313, 12394, 12486, 12714, 12935, 13329, 13660, 13699, 13963, 14126, 14127, 14253, 14372, 14386, 14506, 14565, 14574, 14681, 14692, 14981, 15042, 15567, 16134, 16173, 16234, 16359, 16457, 16503, 16735, 17182, 17769, 17995, 18070, 18212, 18733, 18867, 19077, 19210, 19311, 19322, 19345, 19594, 19615, 19923, 19989, 20221, 20448, 20744, 20900, 21477, 21665, 21994, 22136, 22197, 22354, 23052, 23312, 23639, 23750, 23884, 23951, 24064, 24431, 24567, 24852, 25338, 25586, 25726, 26401, 26462, 26486, 26549, 26883, 27175, 27339, 27541, 27775, 27893, 28072, 28115, 28134, 28416, 28473, 28570, 29311, 29779, 30848, 31158, 31443, 31695, 32125, 32318, 32931, 33075, 33270, 34148, 34270, 35479, 35811, 35849, 37455, 37569, 38181, 40811, 42332, 82957, 85641, 86178, 86198, 86224, 81954, 43776, 44652, 44708, 45030, 45054, 45604, 45916, 46754, 47887, 48194, 48418, 48715, 48761, 49051, 49386, 49894, 49897, 50309, 50827, 50833, 50976, 51327, 51387, 51438, 51871, 53090, 53477, 53492, 53991, 55235, 55336, 55498, 56152, 56180, 56367, 56488, 56494, 56929, 57477, 58233, 58750, 59746, 60095, 60660, 62055, 62564, 62910, 63624, 63645, 64132, 64271, 64600, 64762, 65180, 65257, 65799, 65926, 66789, 67241, 67246, 67594, 67700, 67825, 68045, 68304, 68533, 68861, 69639, 69702, 70601, 70698, 70786, 70843, 72144, 72251, 72490, 74409, 74462, 74470, 75388, 76102, 76224, 76236, 76295, 76429, 77703, 77975, 78671, 78769, 79389, 80337, 16347, 16551, 17711, 17737, 17778, 18599, 20275, 20614, 21315, 22041, 22120, 22298, 22313, 22584, 22692, 22866, 23280, 23305, 23761, 24138, 25096, 25190, 25233, 25485, 25691, 26173, 26274, 26500, 27171, 27203, 27206, 27449, 27588, 27778, 27947, 27949, 28054, 28976, 29464, 29551, 29778, 29985, 30471, 30510, 30757, 30768, 31258, 31467, 31750, 31801, 32267, 32412, 32574, 32611, 32777, 32825, 33124, 33170, 33213, 33339, 33400, 33501, 33600, 33772, 33945, 33950, 34284, 34608, 34666, 34958, 34978, 35179, 35589, 35880, 36302, 36400, 36544, 36726, 37102, 37154, 37267, 37373, 37627, 38175, 38198, 38404, 38993, 39492, 39757, 40008, 40405, 40425, 41608, 41863, 41888, 42443, 42447, 42541, 42603, 42852, 42915, 83130, 84242, 80779, 80943, 81649, 82738])

# Tigris & Euphrates basin
ids = ee.List([72214,80005,86203,74727,21800,61850,38397,64191,92038,43655,43433,78405,21470,51283,91950,90251,90155,90422,90461,84119,33206,66156,58258,44698,9128,41797,37620,6754,74482,60679,31290,47479,28369,5760,73342,74159,4859,80675,86425,27055,74426,89994,76807,56293,89289,87871,86106,86997,54515,80979,86520,80485,54613,86029,88634,75906,81967,82349,88920,80395,80411,83123,85613,80822,54064,61070,38553,75202,78881,6098,38713,39587,77459,84663,84754,74,43903,48845,49957,53418,57494,62389,64412,65729,67958,69951,76250,9609,15108,18600,37638,81171,81436,81735,204,1504,44828,45479,47533,49396,51129,54877,60342,62337,65980,66130,72173,3731,3813,4326,4603,5316,8983,13199,13779,16591,18527,19877,22011,33465,36570,37236,89638,90464,87493,87545,88718,88917,88978,89884,90183,80549,82260,75579,77855,83166,83260,85759,86077,86722,87193,87387,89198,90365,82799,43204,46152,49585,52906,53314,53361,59613,61679,63613,65728,68591,69259,69726,70831,72402,73274,74405,74529,75775,76520,76845,78535,7275,19109,24037,84525,87478])


waterbodies = waterbodies.filter(ee.Filter.inList('fid', ids)) # update only with id 

count = waterbodies.size().getInfo()

# Only need this if you're running this code locally.
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = r'../keys/global-water-watch-storage-key.json'

client = storage.Client()
bucket = client.get_bucket('global-water-watch')

def get_time_series(waterbody):
  scale = waterbody.geometry().area().sqrt().divide(200).max(10).getInfo()

  start = EXPORT_TIME_START
  start_filter = EXPORT_TIME_START_FILTER
  # start_filter = start
  stop = EXPORT_TIME_STOP

  missions = ['L4', 'L5', 'L7', 'L8', 'S2']

  water_area = computeSurfaceWaterArea(waterbody, start_filter, start, stop, scale, waterOccurrence, missions)

  water_area = (water_area
      .filter(
        ee.Filter.And(
          ee.Filter.neq('p', 101),
          ee.Filter.gt('ndwi_threshold', -0.15),
          ee.Filter.lt('ndwi_threshold', 0.5),
          ee.Filter.lt('filled_fraction', 0.6)
        )
      )
      .sort('system:time_start')
      )

  properties = ['MISSION', 'ndwi_threshold', 'quality_score', 'area_filled', 'filled_fraction', 'p', 'system:time_start', 'area']
  properties_new = ["mission", "ndwi_threshold", "quality_score", "water_area_filled", "water_area_filled_fraction", "water_area_p", "water_area_time", "water_area_value"]

  water_area = ee.FeatureCollection(water_area).select(properties, properties_new, False).set('scale', scale)

  return water_area

def update_time_series(waterbody, use_task):
  filename = ee.Number(waterbody.get('fid')).format('%07d').getInfo().zfill(5)
  gs_path = f'{GS_OUTPUT_DIR}/{filename}'

  water_area = get_time_series(waterbody)

  if use_task: # start task
    waterbody_id = waterbody.get('fid').getInfo()

    task = ee.batch.Export.table.toCloudStorage(
      collection=water_area, 
      description=f'reservoir-{waterbody_id:07d}',
      bucket='global-water-watch', 
      fileNamePrefix=gs_path,
      fileFormat='CSV'
    )

    task.start()

    # print(task.status())
    
  else: # write directly to the bucket
    water_area = water_area.getInfo()

    df = pd.DataFrame(list(map(lambda f: f['properties'], water_area['features'])))

    bucket.blob(gs_path).upload_from_string(df.to_csv(index=False), 'text/csv')


def get_number_of_running_tasks():
  statuses = ee.data.getTaskList()
  return len([s['state'] for s in statuses if s['state'] == 'READY' or s['state'] == 'RUNNING'])

def wait_for_running_tasks_to_complete():
  '''
  Watit until number of running tasks < 500
  '''

  n_running_tasks = get_number_of_running_tasks()

  while n_running_tasks > 500:
    time.sleep(600) # 10 min
    n_running_tasks = get_number_of_running_tasks()


count = waterbodies.size().getInfo()

start = 0
offset = 0
t_start = time.time()
retry_count = 0
use_task = True # use task or download directly

missing_ids = []

if missing_only:
    missing_ids = pd.read_csv('missing.csv').missing.values

waterbody_ids = waterbodies.aggregate_array('fid').getInfo()

while True:
  try:
    progress = tqdm(range(start, count), initial=start)
    for offset in progress:
      
      # every 500 tasks check if we need to wait before other tasks complete before starting new ones
      if offset % 500 == 0:
        wait_for_running_tasks_to_complete()

      waterbody_id = waterbody_ids[offset]

      if missing_only:
          if waterbody_id not in missing_ids:
              progress.set_description(f'Skipping {waterbody_id}')
              continue

          waterbody = ee.Feature(waterbodies.toList(1, offset).get(0))
          assert waterbody_id == ee.Number(waterbody.get('fid')).getInfo()

          progress.set_description(f'Downloading {waterbody_id}')

          update_time_series(waterbody, use_task=True)

          # sys.exit()
      else:
        waterbody = ee.Feature(waterbodies.toList(1, offset).get(0))
        assert waterbody_id == ee.Number(waterbody.get('fid')).getInfo()

        progress.set_description(f'Downloading {waterbody_id}')
    
        update_time_series(waterbody, use_task=True)

        # update_time_series(waterbody, use_task=False)
        #
        # t_end = time.time()
        # t_elapsed = str(t_end - t_start)
        # 
        # meta = { 'elapsed': t_elapsed, 'retry_count': retry_count }
        # 
        # id_str = ee.Number(waterbody_id).format('%07d').getInfo().zfill(5)
        # 
        # filename = id_str + '.meta.json'
        # bucket.blob(f'{GS_OUTPUT_DIR}/{filename}').upload_from_string(json.dumps(meta), 'text/json')

        # t_start = time.time()
  except Exception as e:
    retry_count = retry_count + 1
    retry_max = 30

    progress.set_description(f'Retrying {waterbody_id}, {retry_count} of {retry_max}')

    if retry_count > retry_max:
      t_end = time.time()
      t_elapsed = str(t_end - t_start)
      meta = { 'elapsed': t_elapsed, 'retry_count': retry_count }
      filename = ee.Number(waterbody.get('fid')).format('%07d').getInfo().zfill(5) + '.meta.json'
      bucket.blob(f'{GS_OUTPUT_DIR}/{filename}').upload_from_string(json.dumps(meta), 'text/json')

      start = offset + 1
    else:
      start = offset # retry

    print(e)

  if offset == count-1:
    break
